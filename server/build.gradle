plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'ear'
    /* Project specific plugins */
    id 'checkstyle'
    id 'jacoco'
    id("io.micronaut.application") version "1.2.0"
    id 'war'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

group = 'at.fhv.teamg.librarymanagement'
version = '0.0.1'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    /* Project specific dependencies */
    compile 'javax.persistence:javax.persistence-api:2.2'
    compile 'mysql:mysql-connector-java:5.1.49'
    compile 'org.apache.logging.log4j:log4j-api:2.13.3'
    compile 'org.apache.logging.log4j:log4j-core:2.13.3'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'
    api 'org.hibernate:hibernate-core:5.4.22.Final'
    compile('org.apache.activemq:activemq-all:5.16.0') {
        exclude group: 'org.slf4j'
    }
    compile 'com.fasterxml.jackson.core:jackson-databind:2.11.3'

    implementation 'at.fhv.teamg.librarymanagement:LibraryManagement_Shared:0.+'

    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    annotationProcessor "io.micronaut.security:micronaut-security-annotations"
    annotationProcessor("io.micronaut.openapi:micronaut-openapi:2.2.0")
    implementation("io.swagger.core.v3:swagger-annotations")

    // CLI
    implementation 'info.picocli:picocli:4.5.2'
    annotationProcessor 'info.picocli:picocli-codegen:4.5.2'

    implementation "io.micronaut.security:micronaut-security-jwt"
    /* JAVA EE, EJBs */
    compile group: 'javax', name: 'javaee-api', version: '8.0.1'
    compile group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2.2'
    compile group: 'org.wildfly.bom', name: 'wildfly-jakartaee8-with-tools-builder', version: '21.0.1.Final', ext: 'pom'
    compile group: 'org.jboss.spec.javax.annotation', name: 'jboss-annotations-api_1.3_spec', version: '2.0.1.Final'
    providedCompile group: 'org.jboss.spec.javax.ejb', name: 'jboss-ejb-api_3.2_spec', version: '2.0.0.Final'

    testCompile 'org.mockito:mockito-core:3.5.15'

    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.4.5'
}

application {
    mainClassName = 'at.fhv.teamg.librarymanagement.server.Main'
}

tasks.named('test') {
    useJUnitPlatform()
}

/* Checkstyle configuration */
checkstyle {
    toolVersion = '8.36.2'
    configFile = file("${rootDir}/../config/checkstyle/checkstyle.xml")
}

/* JaCoCo configuration */
jacoco {
    toolVersion = '0.8.5'
}

micronaut {
    runtime("netty")
    processing {
        incremental(true)
        annotations("at.fhv.teamg.librarymanagement.server.*")
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                include: [
                    '**/domain/*',
                ],
                exclude: [
                    '**/domain/*BaseMediaService*',
                ]
            )
        })
    }
}
build.dependsOn jacocoTestReport

/* ShadowJar configuration */
shadowJar {
    archiveFileName = 'LibraryServer.jar'
    mergeServiceFiles()
    manifest {
        attributes(
                'Main-Class': 'at.fhv.teamg.librarymanagement.server.Main'
        )
    }
}

/* Distribution configuration */
distributions {
    main {
        distributionBaseName = 'main'
        contents {
            from shadowJar
        }
    }
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}
war {
    archiveName = 'LibraryServer.war'
}
artifacts {
    archives jar
    archives war
}
